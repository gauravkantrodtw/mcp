name: Deploy to AWS Lambda

on:
  workflow_dispatch:

env:
  AWS_REGION: eu-central-1
  FUNCTION_NAME: mcp-server
  LAMBDA_ARCHITECTURE: x86_64  # Change to arm64 if you want ARM64 Lambda

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install uv
        uses: astral-sh/setup-uv@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Create deployment package
        run: |
          chmod +x create_deployment_package.sh
          ./create_deployment_package.sh

      - name: Deploy to Lambda
        run: |
          # Check if function exists
          if aws lambda get-function --function-name ${{ env.FUNCTION_NAME }} >/dev/null 2>&1; then
            echo "Updating existing function..."
            aws lambda update-function-code \
              --function-name ${{ env.FUNCTION_NAME }} \
              --zip-file fileb://mcp-server-deployment.zip
          else
            echo "Creating new function..."
            
            # Create IAM role
            aws iam create-role \
              --role-name mcp-server-role \
              --assume-role-policy-document '{
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": "lambda.amazonaws.com"
                    },
                    "Action": "sts:AssumeRole"
                  }
                ]
              }' || echo "Role may already exist"
            
            # Attach policies
            aws iam attach-role-policy \
              --role-name mcp-server-role \
              --policy-arn arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole || true
            
            aws iam attach-role-policy \
              --role-name mcp-server-role \
              --policy-arn arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess || true
            
            # Wait for role to be ready
            sleep 10
            
            # Get role ARN
            ROLE_ARN=$(aws iam get-role --role-name mcp-server-role --query 'Role.Arn' --output text)
            
            # Create Lambda function
            aws lambda create-function \
              --function-name ${{ env.FUNCTION_NAME }} \
              --runtime python3.12 \
              --role $ROLE_ARN \
              --handler lambda_handler.lambda_handler \
              --zip-file fileb://mcp-server-deployment.zip \
              --architecture ${{ env.LAMBDA_ARCHITECTURE }} \
              --memory-size 512 \
              --timeout 30
          fi

      - name: Test deployment
        run: |
          # Test the MCP function with the exact test event from lambda_handler.py
          aws lambda invoke \
            --function-name ${{ env.FUNCTION_NAME }} \
            --payload '{
              "version": "2.0",
              "routeKey": "POST /mcp",
              "rawPath": "/mcp",
              "rawQueryString": "",
              "headers": {
                "content-type": "application/json",
                "host": "localhost"
              },
              "requestContext": {
                "http": {
                  "method": "POST",
                  "path": "/mcp",
                  "protocol": "HTTP/1.1",
                  "sourceIp": "127.0.0.1",
                  "userAgent": "test-agent"
                },
                "requestId": "test-request-id",
                "accountId": "123456789012",
                "apiId": "test-api-id",
                "stage": "test"
              },
              "body": "{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"tools/list\", \"params\": {}}",
              "isBase64Encoded": false
            }' \
            response.json
          
          echo "MCP Function response:"
          cat response.json
